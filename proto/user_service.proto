syntax = "proto3";

package user_service;

option go_package = "github.com/latrung124/Totodoro-Backend/internal/proto_package/user_service";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// ===== ENTITIES =====
message User {
  string user_id = 1;
  string email = 2;
  string username = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message Settings {
  string user_id = 1;
  int32 pomodoro_duration = 2;
  int32 short_break_duration = 3;
  int32 long_break_duration = 4;
  bool auto_start_short_break = 5;
  bool auto_start_long_break = 6;
  bool auto_start_pomodoro = 7;
  int32 pomodoro_interval = 8;
  string theme = 9;
  bool short_break_notification = 10;
  bool long_break_notification = 11;
  bool pomodoro_notification = 12;
  bool auto_start_music = 13;
  string language = 14;
  bool auto_start_next_task = 15;
}

// ===== REQUESTS/RESPONSES =====
message GetUserRequest {
  string user_id = 1;
}

message GetUserResponse {
  User user = 1;
}

message CreateUserRequest {
  string email = 1;
  string username = 2;
}

message CreateUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string user_id = 1;
  string email = 2;
  string username = 3;
}

message UpdateUserResponse {
  User user = 1;
}

message GetSettingsRequest {
  string user_id = 1;
}

message GetSettingsResponse {
  Settings settings = 1;
}

message UpdateSettingsRequest {
  string user_id = 1;
  int32 pomodoro_duration = 2;
  int32 short_break_duration = 3;
  int32 long_break_duration = 4;
  bool auto_start_short_break = 5;
  bool auto_start_long_break = 6;
  bool auto_start_pomodoro = 7;
  int32 pomodoro_interval = 8;
  string theme = 9;
  bool short_break_notification = 10;
  bool long_break_notification = 11;
  bool pomodoro_notification = 12;
  bool auto_start_music = 13;
  string language = 14;
  bool auto_start_next_task = 15;
}

message UpdateSettingsResponse {
  Settings settings = 1;
}

// ===== SERVICE =====
service UserService {
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}"
    };
  }

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/users"
      body: "*"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/api/v1/users/{user_id}"
      body: "*"
    };
  }

  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}/settings"
    };
  }

  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {
    option (google.api.http) = {
      put: "/api/v1/users/{user_id}/settings"
      body: "*"
    };
  }
}
